Q.1- If three thread t1, t2, t3 are running at a time how to make sure thread t3 end at last 
   after completion of t1 t2.
	ANS.-
	
	Your proposed code won't work. t3 could finish before t2 even starts. 
	To guarantee they run in sequence, you need to to this:

	final Thread t3 = new Thread(new T3()); // assume T3 is a Runnable
	final Thread t2 = new Thread(new T2());
	final Thread t1 = new Thread(new T1());

	t1.start();
	t1.join();
	t2.start();
	t2.join();
	t3.start();
	But then using multiple threads is pointless and wasteful. You would achieve 
	the same effect with a single thread:

	new T1().run();
	new T2().run();
	new T3().run();
	
	
Q.2- Since run method does not throw exception how to log checked exception occurred 
   while executing a thread?

Ans.
1-  Thread.UncaughtExceptionHandler h = new Thread.UncaughtExceptionHandler() {
    public void uncaughtException(Thread th, Throwable ex) {
        System.out.println("Uncaught exception: " + ex);
    }
};
Thread t = new Thread() {
    public void run() {
        System.out.println("Sleeping ...");
        try {
            Thread.sleep(1000);
        } catch (InterruptedException e) {
            System.out.println("Interrupted.");
        }
        System.out.println("Throwing exception ...");
        throw new RuntimeException();
    }
};
t.setUncaughtExceptionHandler(h);
t.start();

2- 
	public class ThingRunnable implements Runnable {
    private SomeListenerType listener;
    // assign listener somewhere

    public void run() {
        try {
            while(iHaveMorePackets()) { 
                doStuffWithPacket();
            }
        } catch(Exception e) {
            listener.notifyThatDarnedExceptionHappened(...);
        }
    }
 }


Q.3- Sorting arrays, objects, looping over an array of objects, etc OOJS in depth.

Q.4-Design a Hotel Reservation System using OOPS, project worked on experience in REST, 
//Simple OOPs concepts. Inheritance polymorphism Onsite:
Ans;- 
	class Hotel {
    private String name, address;
    private List<Room> roomList;   //key : roomNumber
    public Hotel(){
        roomList = new ArrayList<Room>();
    }
    public Reservation bookRoomForDates(List<Integer> dateList, Guest guest){
        for(Room room : roomList){
            Reservation reservation = room.bookForGivenDates(dateList, guest);
            if(reserved != null) return reservation; //Reservation successFull!
        }
        return null; //Reservation failed!
    }
}
class Reservation {
    private String id;
    private Date inDate, outDate;
    private Guest guest;

    public Reservation(Room room, int startDate, int endDate, Guest guest){
        //populate the member variables.
    }
}

class Room {
    private String id;
    private int roomNumber, floorNum;
    private Map<Integer, Reservation> reservedDates;  // key : date as Integer (YYYYMMDD)

    public Room(int roomNumber){
        reservedDates = new HashMap<Integer, Reservation>();
        this.roomNumber = roomNumber;
    }

    //A guest request for booking on dates(in YYYYMMDD format) in the dateList
    public Reservation bookForGivenDates(List<Integer> dateList, Guest guest)  
    {   
        if(dateList.isEmpty()) return null;

        for(Integer date : dateList){
            Reservation res = reservedDates.get(date);  
            if(res != null) {  // We don't store null value for unreserved dates for the room.
                return null;  // Room is reserved on this date by another guest. So, this room is unavailable.
            }
        }
        //this room is unreserved on all requested dates. So go on and reserve this room for asked dates
        int startDate = dateList.get(0);
        int endDate   = dateList.get(dateList.size() - 1);

        Reservation newReservation = new Reservation(this, startDate, endDate, guest);
        for(Integer date : dateList){
            reservedDates.put(date, newReservation);
        }
        return newReservation;
    }
}




Q-5:- 3 ants are sitting on an equilateral triangles corner and   start moving randomly so what is the probability of them meeting? 
ans- 9, 6 == 6/9 = 2/3.

Q- 6: Write bubble sort algorithm and compare it with binary search ?
Ans:-
	for(int index = 0; index < len; index++){
			
			for(int jIndex = index + 1; jIndex < len; jIndex++){
				
				if(input[index] > input[jIndex]){
					temp = input[jIndex];
					input[jIndex] = input[index];
					input[index] = temp;
				}
			}
		}
		
Q 1. Difference between inner and outer join?
Ans. Inner join - An inner join using either of the equivalent queries gives the intersection 
of the two tables, i.e. the two rows they have in common.
Left outer join - A left outer join will give all rows in A, plus any common rows in B.
Full outer join - A full outer join will give you the union of A and B, i.e. 
All the rows in A and all the rows in B. If something 
in A doesn't have a corresponding datum in B, then the B portion is null, and vice versa. 

Q. 2. Detect loop in linked list?
Ans.
	boolean hasLoop(Node first) {
    Node slow = first;
    Node fast = first;

    while(fast != null && fast.next != null) {
        slow = slow.next;          // 1 hop
        fast = fast.next.next;     // 2 hops 

        if(slow == fast)  // fast caught up to slow, so there is a loop
            return true;
    }
    return false;  // fast reached null, so the list terminates
}

Q.3. 2 candles 45 mins problem?
 Ans:- burn 1st both side and second from one end aftre 1st completion burn second other end.


Q.1. Explain Aggregation, composition, abstraction?

Aggregation and composition are almost completely identical except that composition is used when the life of the child is completely controlled by the parent.

Aggregation

Car -> Tires
The Tires can be taken off of the Car object and installed on a different one. Also, if the car gets totaled, the tires do not necessarily have to be destroyed.

Composition

Body -> Blood Cell
When the Body object is destroyed the BloodCells get destroyed with it.

Dependency

A relationship between two objects where changing one may affect the other.

2. When will aggregation used and composition.

3. Explain encapsulation.
Abstraction :-  is a process where you show only “relevant” data and “hide” unnecessary 
details of an object from the user. Consider your mobile phone, you just need to know what 
buttons are to be pressed to send a message or make a call, What happens when you press a button, 
how your messages are sent, how your calls are connected is all abstracted away from the user.

Encapsulation :- is the process of combining data and functions into a single unit 
called class. In Encapsulation, the data is not accessed directly; 
it is accessed through the functions present inside the class. In simpler words, 
attributes of the class are kept private and public getter and setter methods are 
provided to manipulate these attributes. 
Thus, encapsulation makes the concept of data hiding possible.



8. Decorator design pattern. When to use decorator design pattern.

-Decorator design pattern is a pattern which modifies the functionality of an object.
 In other words it gives different flavours to an object without using inheritance. 
 You might think why not use inheritance if you are talking about flavours? Well, 
 yes these are flavours but the permutation and combination of these flavours can be 
 many and in that case it doesn’t make sense to create a class for each combination.

Lets say you have 6 factors that can change the characteristics of your object, 
in that case you will have factorial of 
6 which is, 6! = 720, so there can be 720 objects with different characteristics.

9. Singleton design pattern. Performance impact of lazy initialization.
Ans.
	I was doing some research about singletons, specifically regarding lazy vs eager initialization of singletons.

An example of eager initialization:

public class Singleton
{
    //initialzed during class loading
    private static final Singleton INSTANCE = new Singleton();

    //to prevent creating another instance of Singleton
    private Singleton(){}

    public static Singleton getSingleton(){
        return INSTANCE;
    }
}
but as shown above that it is eager initialization and thread safety is left to jvm but now,
 I want to have this same pattern but with lazy initialization.

so I come up with this approach:

public final class Foo {
    private static class FooLoader {
        private static final Foo INSTANCE = new Foo();
    }
    private Foo() {
        if (FooLoader.INSTANCE != null) {
            throw new IllegalStateException("Already instantiated");
        }
    }
    public static Foo getInstance() {
        return FooLoader.INSTANCE;
    }
}
As shown above Since the line

private static final Foo INSTANCE = new Foo(); 
is only executed when the class FooLoader is actually used, this takes care of the lazy instantiation, 
and is it guaranteed to be thread safe.

10. Explain cloneble and serializable.  

Q. Complete core java, design patterns, JMS, Web services,
 - multi threading
- concurrency
- serialization
- inner classes
- JMM
- Garbage collection
- JMS
- Rest and soap web service difference
- discussion on the coding exercise
- Junit cases for coding exercise
Q. Spring and hibernate (optional)  
q-Different Java GC algorithms ?
Ans.
As of today, there are 4 GC algorithms available in the Java Hotspot VM:

The Serial GC - recommended for client-style applications that do not have low pause time requirements.
The Parallel GC - use when the throughput matters.
The Mostly-Concurrent GC (also known as Concurrent Mark-Sweep GC(CMS)) - use when the latency matters.
The Garbage First GC (G1) - new GC algorithm, for CMS replacement.
You can find more information about these GC algorithms in the references below.

Books:

Java Performance - practical guide, contains chapters on GC, explains comprehensively 
when and how to use various Hotspot GC algorithms,
The Garbage Collection Handbook - Garbage-Collection theory explained, mentions all 
available GC techniques.
Talks/Articles:

Java One 2012 Advanced JVM Tuning
Java One 2012 G1 Garbage Collector Performance Tuning
Garbage Collection Tuning Guide
Java HotSpot Garbage Collection
Mailing List:

Thread pool, Bean life cycle, Concurrent API's, 
Locks, Producer consumer Problem, Linked list implementation, 
Hashmap and Treemap Implementation, Exception Handling, 
Servlet life cycle, Internal working of Garbage collectors etc  

Q.swap two variables without using third variable?
Ans.
    a = 10, b = 20;
    b = a + b;
    a = b - a;
    b = b - a;	

Q. why use locks instead of synchronization?
Ans.
Q. How to stop a thread?
Ans.
Executor service ?
rules of overriding?
Q.How to serialize singleton?  

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectStreamException;
import java.io.Serializable;

public class AppState implements Serializable
{
    private static AppState s_instance = null;

    public static synchronized AppState getInstance() {
        if (s_instance == null) {
            s_instance = new AppState();
        }
        return s_instance;
    }

    private AppState() {
        // initialize
    }

    private void readObject(ObjectInputStream ois) throws IOException, ClassNotFoundException {
        ois.defaultReadObject();
        synchronized (AppState.class) {
            if (s_instance == null) {
                // re-initialize if needed

                s_instance = this; // only if everything succeeds
            }
        }
    }

    // this function must not be called other than by the deserialization runtime
    private Object readResolve() throws ObjectStreamException {
        assert(s_instance != null);
        return s_instance;
    }

    public static void main(String[] args) throws Throwable {
        assert(getInstance() == getInstance());

            java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
            java.io.ObjectOutputStream oos = new java.io.ObjectOutputStream(baos);
            oos.writeObject(getInstance());
            oos.close();

            java.io.InputStream is = new java.io.ByteArrayInputStream(baos.toByteArray());
            ObjectInputStream ois = new ObjectInputStream(is);
            AppState s = (AppState)ois.readObject();
            assert(s == getInstance());
    }
}

Cutting a cake in 8 parts in 3 cuts

make a pattern 1 12 123 1234 12345 without using loop


Java: Given a set of strings of full names(first, middle and last name), 
write a code to print the names as, 
only first letter of first and middle name and whole last name.

Online Cab booking system

solid design principles, concurrent packages, garbage collection algorithms, design patterns, collections, etc 

Write a program to demonstrate object oriented programming concepts?

How do you reverse a linked list using one node?
Describe software life cycle?  